** inference rules
formation rules - how to build type (declare type)
introduction rules - how to create elements
elimination rules - how to use elements
computation rules - what will happen when we introduce and then eliminate
uniqueness rules - if we eliminate and introduce we should get the same result

** free variables
TODO

** substitution
TODO

approaches to avoid variable capture
- [[https://en.wikipedia.org/wiki/De_Bruijn_index][de Bruijn index]]
- nominal techniques
- ...

** renaming
TODO

** structural rules
TODO

** universes

We cannot allow to have rule Γ ⊢ U : U because this leads to paradoxes: [[https://en.wikipedia.org/wiki/Burali-Forti_paradox][Burali-Forti_paradox]],
[[https://en.wikipedia.org/wiki/Russell%27s_paradox][Russell's paradox]].

#+BEGIN_SRC

------------------- (Univ-I)
Γ ⊢ U(i) : U(i+1)
#+END_SRC


#+BEGIN_SRC
Γ ⊢ A : U(i)
--------------- (Univ-Cumul)
Γ ⊢ A : U(i+1)
#+END_SRC

* basic types

** product type (pair, tuple)

*** formation rule

#+BEGIN_SRC
A type  A type
-------------- (*F)
A * B type
#+END_SRC

*** introduction rule

#+BEGIN_SRC
m: A  n: B
----------- (*I)
(m,n): A*B
#+END_SRC

*** elimination rules

#+BEGIN_SRC
ab: A * B
----------- (*E1)
fst(ab) : A
#+END_SRC

#+BEGIN_SRC
ab: A * B
----------- (*E2)
snd(ab): B
#+END_SRC

*** computation rules (introduce and then eliminate)

#+BEGIN_SRC
m: A  n: B
--------------- (*C1)
fst((m,n)) == m
#+END_SRC

#+BEGIN_SRC
m: A  n: B
--------------- (*C2)
snd((m,n)) == n
#+END_SRC

*** uniqueness rules (eliminate and introduce we get the same):

#+BEGIN_SRC
ab: A * B
------------------------------ (*U)
ab == (fst(ab),snd(ab)): A * B
#+END_SRC


** (disjoint) sum type (either)

*** formation rules

#+BEGIN_SRC
A type   B type
---------------- +-form
A + B type
#+END_SRC

*** introduction rules

#+BEGIN_SRC
m: A
--------------- +-Intro-1
left(m): A + B

n: B
---------------- +-Intro-2
right(n): A + B
#+END_SRC

*** elimination rule

#+BEGIN_SRC
x: A ⊢ m: C   y:B ⊢ n: C   o: A+B
---------------------------------- +-Elim
case(x.m;y.n;o): C
#+END_SRC

*** computation rules

#+BEGIN_SRC
x: A ⊢ m: C   y:B ⊢ n: C   o: A
------------------------------------ +-Elim
case(x.m;y.n;left(o)) == m[o/x] : C
#+END_SRC

#+BEGIN_SRC
x: A ⊢ m: C   y:B ⊢ n: C   o: B
------------------------------------- +-Elim
case(x.m;y.n;right(o)) == n[o/x] : C
#+END_SRC

** unit type (top)

*** formation rule

#+BEGIN_SRC

--------- 1-Form
One type
#+END_SRC

*** introduction rule

#+BEGIN_SRC

--------- 1-Intro
<> : One
#+END_SRC

*** no elimination rules

*** no computation rules

*** uniqueness rule

#+BEGIN_SRC

m: One
------------- 1-Uniq
m == <> : One
#+END_SRC

** empty type (bottom, void)

*** formation

#+BEGIN_SRC

----------- 0-Form
Zero type
#+END_SRC

*** no introduction rules

*** elimination rule

#+BEGIN_SRC
m: Zero
------------- 0-Elim
absurd(m) : C
#+END_SRC

*** no computation rules

** function type

formation

* Dependent Types

** dependent sum

** dependent product

** identification

*** formation rule

#+BEGIN_SRC
A type   m: A   n: A
--------------------- (Id-Form)
Id(A)(m,n) type
#+END_SRC

*** introduction rule

#+BEGIN_SRC
m: A
-------------------- (Id-Intro)
refl(m): Id(A)(m,m)
#+END_SRC

*** elimination rule
#+BEGIN_SRC
A type   n:A   o:A   p:Id(A)(n;o)
x:A,y:A,q:Id(x;y) ⊢ C type
z: A ⊢ m : C[x -> z, y -> z, q -> refl(z)]
-------------------------------------------- (Id-Elim)
J[X.y.q.C](z.M;p): C[x -> n, y -> o, q -> p]
#+END_SRC

*** computation rule

#+BEGIN_SRC
A type n:A o:A
x:A,y:A,q:Id(A)(x;y) ⊢ C type
z:A ⊢ m: C[x -> z, y -> z, q -> refl(z)]
-------------------------------------------------------------- (Id-Comp)
J[X.y.q.C](z.M;refl(n)) == m[z -> n]: C[x -> n, y -> o, q -> p]
#+END_SRC

** equality types
- equality types and judgemental equality are equivalent
- equality types are internalization of judgemental equality
- rules all rules o Identification +

equality reflection rule:

#+BEGIN_SRC
Γ ⊢ p : Eq(A)(m;n)
-------------------- (Eq-Ref)
Γ ⊢ m == n : A
#+END_SRC

#+BEGIN_SRC
Γ ⊢ m == n : A
----------------------- (Eq-RefInv)
Γ ⊢ refl(m): Eq(A)(m;n)
#+END_SRC

uniqueness rule

#+BEGIN_SRC
p: Eq(A)(m;n)
----------------------- (Eq-Uniq)
p == refl : Eq(A)(m;n)
#+END_SRC
